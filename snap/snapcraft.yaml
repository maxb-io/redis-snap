name: redis
adopt-info: redis
summary: Redis is used as a database, cache and message broker. # 79 char long summary
description: |
  Redis is source-available software, available under both the Redis Source Available License v2 (RSALv2) and the Server Side Public License v1 (SSPLv1). In-memory data structure store, used as a database, cache and message broker. |
  It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. |
  Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. |
  |
  Check out https://redis.io/ for more information.

grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict # use 'strict' once you have the right plugs and slots
base: core22

apps:
  server:
    command: usr/bin/redis-server --loadmodule $SNAP/usr/lib/redis/modules/redisbloom.so --loadmodule $SNAP/usr/lib/redis/modules/rejson.so --loadmodule $SNAP/usr/lib/redis/modules/redistimeseries.so --loadmodule $SNAP/usr/lib/redis/modules/redisearch.so
    daemon: simple
    restart-condition: always
    environment:
      LANG: C.UTF-8
    plugs:
      - network
      - network-bind
      - network-observe
      - home
  cli:
    command: usr/bin/redis-cli
    plugs:
      - network
      - network-bind
      - network-observe
      - home
  benchmark:
    command: usr/bin/redis-benchmark
    plugs:
      - network
      - network-bind
      - network-observe
      - home
  check-aof:
    command: usr/bin/redis-check-aof
    plugs:
      - network
      - network-bind
      - network-observe
      - home
  check-rdb:
    command: usr/bin/redis-check-rdb
    plugs:
      - network
      - network-bind
      - network-observe
      - home
  sentinel:
    command: usr/bin/redis-sentinel
    environment:
      LANG: C.UTF-8
    plugs:
      - network
      - network-bind
      - network-observe
      - home

parts:
  redis:
    plugin: make
    source: https://github.com/redis/redis.git
#    source: redis
    source-branch: 8.0-m01
    build-environment:
      - BUILD_WITH_MODULES: "yes"
    override-build: |
      echo "BUILD_WITH_MODULES = $BUILD_WITH_MODULES"

      # Rust installation script
      RUST_VERSION=1.80.1; \
      ARCH="$(uname -m)"; \
      if ldd --version 2>&1 | grep -q musl; then LIBC_TYPE="musl"; else LIBC_TYPE="gnu"; fi; \
      echo "Detected architecture: ${ARCH} and libc: ${LIBC_TYPE}"; \
      case "${ARCH}" in \
        'x86_64') \
          if [ "${LIBC_TYPE}" = "musl" ]; then \
            RUST_INSTALLER="rust-${RUST_VERSION}-x86_64-unknown-linux-musl"; \
            RUST_SHA256="37bbec6a7b9f55fef79c451260766d281a7a5b9d2e65c348bbc241127cf34c8d"; \
          else \
            RUST_INSTALLER="rust-${RUST_VERSION}-x86_64-unknown-linux-gnu"; \
            RUST_SHA256="85e936d5d36970afb80756fa122edcc99bd72a88155f6bdd514f5d27e778e00a"; \
          fi ;; \
        'aarch64') \
          if [ "${LIBC_TYPE}" = "musl" ]; then \
            RUST_INSTALLER="rust-${RUST_VERSION}-aarch64-unknown-linux-musl"; \
            RUST_SHA256="dd668c2d82f77c5458deb023932600fae633fff8d7f876330e01bc47e9976d17"; \
          else \
            RUST_INSTALLER="rust-${RUST_VERSION}-aarch64-unknown-linux-gnu"; \
            RUST_SHA256="2e89bad7857711a1c11d017ea28fbfeec54076317763901194f8f5decbac1850"; \
          fi ;; \
        *) echo >&2 "Unsupported architecture: '${ARCH}'"; exit 1 ;; \
      esac; \
      echo "Downloading and installing Rust standalone installer: {RUST_INSTALLER}"; \
      wget --quiet -O ${RUST_INSTALLER}.tar.xz https://static.rust-lang.org/dist/${RUST_INSTALLER}.tar.xz; \
      echo "${RUST_SHA256} ${RUST_INSTALLER}.tar.xz" | sha256sum -c --quiet || { echo "Rust standalone installer checksum failed!"; exit 1; }; \
      tar -xf ${RUST_INSTALLER}.tar.xz; \
      (cd ${RUST_INSTALLER} && ./install.sh); \
      rm -rf ${RUST_INSTALLER}
      find / -name rustc

#      source $HOME/.cargo/env
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/usr
      export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"
      export PYTHON=python3
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/usr
      export CC=${SNAPCRAFT_ARCH_TRIPLET}-gcc
      export DEB_HOST_GNU_TYPE=${SNAPCRAFT_ARCH_TRIPLET}
      make -j4 BUILD_TLS=yes
      PREFIX=${SNAPCRAFT_PART_INSTALL}/usr make BUILD_TLS=yes install
      VER=`sed -n 's/^.* REDIS_VERSION "\(.*\)"$/\1/g p' < src/version.h`
      if [ "$VER" = "999.999.999" ]; then
          GITSHA=`sed -n 's/^.* REDIS_GIT_SHA1 "\(.*\)"$/\1/g p' < src/release.h`
          VER="unstable-$GITSHA"
      fi
      snapcraftctl set-version $VER
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/usr/lib/redis/modules


    build-packages:
      - to arm64:
        - gcc
        - g++
        - git
        - cmake
        - python3
        - python3-pip
        - python3-venv
        - python3-dev
        - unzip
        - rsync
        - clang
        - automake
        - autoconf
        - libtool
        - libssl-dev
        - curl
        - libssl-dev:arm64
        - jq
      - to amd64:
        - libboost-all-dev
        - gcc
        - g++
        - git
        - cmake
        - python3
        - python3-pip
        - python3-venv
        - python3-dev
        - unzip
        - rsync
        - clang
        - automake
        - autoconf
        - libtool
        - libssl-dev
        - curl
        - libssl-dev:amd64
        - jq

          #  redisearch:
          #    plugin: nil
          #    source: .
          #    stage-packages:
          #      - libuv1
